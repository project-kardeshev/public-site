{"version":3,"file":"Blueprints-Ba5LPI4C.js","sources":["../../src/components/tables/BlueprintsTable.tsx","../../src/pages/Blueprints.tsx"],"sourcesContent":["import { Space, Tag } from 'antd';\nimport { startCase } from 'lodash';\nimport { Blueprint } from 'types/blueprint';\n\nimport { DataColumn, DataTable } from './common';\n\nconst stubData: Blueprint[] = [\n  {\n    title: 'CNC machine',\n    description: 'High Precision CNC machine',\n    fileName: 'cnc.zip',\n    owners: ['0x123', '0x456'],\n    tokenId: 1,\n    royaltySettings: {\n      royaltyBps: 100,\n      royaltyAddress: '0x123',\n      license: 'UDL',\n    },\n  },\n];\n\nfunction blueprintsColumnsGenerator(data: Record<string, any>): DataColumn[] {\n  const renderKeys = ['title', 'tokenId', 'royaltySettings', 'owners'];\n\n  return Object.keys(data)\n    .map((key, index) => {\n      if (!renderKeys.includes(key)) {\n        return;\n      }\n      return new DataColumn({\n        key: index.toString(),\n        title: startCase(key),\n        dataIndex: key,\n        render: (value: any, record: Record<string, any>) => {\n          switch (key) {\n            case 'title':\n              return value;\n            case 'tokenId':\n              return `${value} ${record.currency}`;\n            case 'royaltySettings':\n              return (\n                <Space>\n                  {Object.entries(value).map(\n                    ([setting, settingValue], index: number) => (\n                      <Tag key={index} color=\"orange\">\n                        {setting}: {settingValue as any}\n                      </Tag>\n                    ),\n                  )}\n                </Space>\n              );\n            case 'owners':\n              return value.length;\n            default:\n              return value;\n          }\n        },\n      });\n    })\n    .filter((column) => column !== undefined) as DataColumn[];\n}\n\nfunction BlueprintsTable() {\n  return (\n    <>\n      {' '}\n      <DataTable\n        columnGenerator={blueprintsColumnsGenerator}\n        defaultColumns={blueprintsColumnsGenerator(stubData[0])}\n        requestCacheKey=\"blueprints\"\n        dataFetcher={async () => stubData}\n      />\n    </>\n  );\n}\n\nexport default BlueprintsTable;\n","import BlueprintsTable from '@src/components/tables/BlueprintsTable';\n\nfunction Bounties() {\n  return (\n    <div className={'size-full'}>\n      <BlueprintsTable />\n    </div>\n  );\n}\n\nexport default Bounties;\n"],"names":["stubData","blueprintsColumnsGenerator","data","renderKeys","key","index","DataColumn","lodashExports","value","record","jsxRuntimeExports","Space","setting","settingValue","index2","Tag","column","BlueprintsTable","DataTable","Bounties"],"mappings":"qcAMA,MAAAA,EAAA,CAAA,CACA,MAAA,cACA,YAAA,6BACA,SAAA,UACA,OAAA,CAAA,QAAA,OAAA,EACA,QAAA,EACA,gBAAA,CACA,WAAA,IACA,eAAA,QACA,QAAA,KACA,CACA,CAEA,EAEA,SAAAC,EAAAC,EAAA,CACA,MAAAC,EAAA,CAAA,QAAA,UAAA,kBAAA,QAAA,EAEA,OAAA,OAAA,KAAAD,CAAA,EAAA,IAAA,CAAAE,EAAAC,IAAA,CAEA,GAAAF,EAAA,SAAAC,CAAA,EAGA,OAAA,IAAAE,EAAA,CAAA,IAAAD,EAAA,SAAA,EACA,MAAAE,EAAA,UAAAH,CAAA,EACA,UAAAA,EACA,OAAA,CAAAI,EAAAC,IAAA,CAEA,OAAAL,EAAA,CAAA,IAAA,QAEA,OAAAI,EAAA,IAAA,UAEA,MAAA,GAAAA,CAAA,IAAAC,EAAA,QAAA,GAAA,IAAA,kBAEA,OAAAC,EAAA,IAAAC,EAAA,CAAA,SAAA,OAAA,QAAAH,CAAA,EAAA,IAEA,CAAA,CAAAI,EAAAC,CAAA,EAAAC,IAAAJ,EAAA,KAAAK,EAAA,CAAA,MAAA,SAAA,SAAA,CAGAH,EAAA,KAAAC,CAAA,CAAA,EAAAC,CAAA,CACA,CAAA,CAAA,EAGA,IAAA,SAGA,OAAAN,EAAA,OAAA,QAEA,OAAAA,CAAA,CACA,CACA,CAAA,CACA,CAAA,EAAA,OAAAQ,GAAAA,IAAA,MAAA,CAGA,CAEA,SAAAC,GAAA,CACA,OAAAP,EAAA,KAAAA,EAAA,SAAA,CAAA,SAAA,CAEA,IAAAA,EAAA,IACAQ,EAAA,CAAA,gBAAAjB,EACA,eAAAA,EAAAD,EAAA,CAAA,CAAA,EACA,gBAAA,aACA,YAAA,SAAAA,CACA,CAAA,CACA,CAAA,CAAA,CAGA,CCxEA,SAAAmB,GAAA,CACA,OAAAT,EAAA,IAAA,MAAA,CAAA,UAAA,YAAA,SAAAA,EAAA,IAAAO,EAAA,CAAA,CAAA,CAAA,CAAA,CAKA"}